{"version":3,"sources":["showTime.js","Todolist/Todoing.js","Todolist/Todoinput.js","Todolist/Todolist.js","index.js"],"names":["React","Component","Todoing","todo","this","props","map","item","idx","key","onClick","e","del","defaultProps","Todoinput","handleInput","keyCode","add","target","value","handleChange","setState","name","parseInt","bind","state","a","b","c","console","log","focus","ref","inp","type","onChange","onKeyDown","Todolist","addItem","data","delItem","splice","obj","o","Object","assign","keys","forEach","ReactDOM","render","document","getElementById","className"],"mappings":"iPAEuBA,IAAMC,U,MCCRC,E,iLAEP,IAAD,OACAC,EAAQC,KAAKC,MAAbF,KACL,OACI,4BAEQA,EAAKG,KAAI,SAACC,EAAKC,GAAN,OAAc,wBAAIC,IAAKD,GAAMD,EAAf,MAAuB,4BAAQG,QAAS,SAACC,GAAD,OAAO,EAAKN,MAAMO,IAAIJ,EAAIG,KAA3C,yB,GAP7BV,aAiBrCC,EAAQW,aAAe,CACnBV,KAAO,CAAC,EAAE,EAAE,EAAE,I,mBChBGW,E,YACjB,aAAc,IAAD,8BACT,+CASJC,YAAc,SAACJ,GAEM,KAAdA,EAAEK,SACD,EAAKX,MAAMY,IAAIN,EAAEO,OAAOC,QAbnB,EAiBbC,aAAe,SAACT,GACZ,EAAKU,SAAL,eACKV,EAAEO,OAAOI,KAAQC,SAA4B,KAAnBZ,EAAEO,OAAOC,MAAa,EAAER,EAAEO,OAAOC,UAjBhE,EAAKJ,YAAc,EAAKA,YAAYS,KAAjB,gBACnB,EAAKC,MAAQ,CACTC,EAAI,GACJC,EAAI,GACJC,EAAI,IANC,E,iFAuBTC,QAAQC,IAAI1B,MACZA,KAAKsB,EAAEK,U,+BAED,IAAD,OACL,OACI,6BACI,2BAAOC,IAAK,SAACC,GAAO,EAAKP,EAAEO,GAAMX,KAAK,IAAIY,KAAK,OAAOC,SAAU/B,KAAKgB,aAAcD,MAAOf,KAAKqB,MAAMC,EAAGU,UAAWhC,KAAKW,cAD5H,IAGI,2BAAOO,KAAK,IAAIY,KAAK,OAAOC,SAAU/B,KAAKgB,aAAcD,MAAOf,KAAKqB,MAAME,EAAGS,UAAWhC,KAAKW,cAHlG,IAKI,2BAAOO,KAAK,IAAIY,KAAK,OAAOC,SAAU/B,KAAKgB,aAAcD,MAAOf,KAAKqB,MAAMG,EAAGQ,UAAWhC,KAAKW,cALlG,IAOI,2BAAIX,KAAKqB,MAAMC,EAAEtB,KAAKqB,MAAME,EAAEvB,KAAKqB,MAAMG,GAGzC,2BAAOI,IAAK,SAACC,GAAO,EAAKA,IAAIA,GAAMC,KAAK,SACxC,4BAAQxB,QAAS,WAAKmB,QAAQC,IAAI,EAAKG,IAAId,SAA3C,qB,GAxCuBlB,aCAlBoC,E,YACjB,aAAc,IAAD,uBACT,+CAkBJC,QAAU,SAACC,GAEP,EAAKlB,SAAS,CACVlB,KAAI,sBAAO,EAAKsB,MAAMtB,MAAlB,CAAuBoC,OAtBtB,EAyBbC,QAAU,SAAChC,EAAIG,GAEXkB,QAAQC,IAAInB,GACZ,IAAIR,EAAI,YAAO,EAAKsB,MAAMtB,MAC1BA,EAAKsC,OAAOjC,EAAI,GAEhB,EAAKa,UAAS,SAACI,EAAMpB,GAEjB,OADAwB,QAAQC,IAAIL,EAAMtB,MACZ,CACFA,KAAKA,OAhCb,EAAKsB,MAAQ,CACTtB,KAAO,CAAC,EAAE,EAAE,IAGhB,IAAIuC,EAAM,CAAChB,EAAI,IAAIC,EAAI,CAAC,EAAE,EAAE,IAGxBgB,EAAIC,OAAOC,OAAO,GAAGH,EAFd,CAACd,EAAI,MAPP,OAaTC,QAAQC,IAAIa,GACZd,QAAQC,IAAIc,OAAOE,KAAKJ,IACxBE,OAAOE,KAAKJ,GAAKK,SAAQ,SAACxC,GACtBsB,QAAQC,IAAIY,EAAInC,OAhBX,E,sEA+CT,OACI,6BACI,kBAAC,EAAD,CAAWU,IAAKb,KAAKkC,UACrB,kBAAC,EAAD,CAAS1B,IAAKR,KAAKoC,QAASrC,KAAMC,KAAKqB,MAAMtB,Y,GAnDvBF,aCWtC+C,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SAoGlBD,SAASC,eAAe,QAI9BC,UAAY,W","file":"static/js/main.77404d8a.chunk.js","sourcesContent":["import React ,{Fragment,Component} from 'react';\r\n\r\nclass ShowTime extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            time : new Date().toLocaleString(),\r\n            a : 100,\r\n            b : 200\r\n        }\r\n        setInterval(()=>{\r\n            this.setState({\r\n                time : new Date().toLocaleString()\r\n            })\r\n        },1000);\r\n    }\r\n    shouldComponentUpdate(){\r\n        if(this.state.a > 10){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    componentDidUpdate(preProps,preState,data){\r\n        console.log('didupdate');\r\n        console.log(preState);\r\n        console.log(this.state.time);\r\n    }\r\n    getSnapshotBeforeUpdate(){\r\n        console.log('getSnapshot');\r\n\r\n        return {name:this.state.a}\r\n    }\r\n    componentDidMount(){\r\n        console.log('didmount');\r\n    }\r\n    render(){\r\n        console.log('render');\r\n        var {name,age} = this.props;\r\n        return (\r\n            <Fragment>\r\n                {/* 条件渲染 */}\r\n                {name.length > 5 ? <div>姓名{name}</div>:''}\r\n                {name.length > 5 && <div>姓名{name}</div>}\r\n                <div>{this.state.time}</div>\r\n                <div>姓名：{name}</div>\r\n                {/* 循环渲染 */}\r\n                <div>年龄：\r\n                    {\r\n                        age.map((item,index)=>{\r\n                            if(index % 2 === 0){\r\n                                return <p key={index}>{item}</p>\r\n                            }\r\n                        })\r\n                    }\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n//默认导出 只能导出一次 被引入时可以重命名\r\n// export default ShowTime;\r\n\r\n//命名导出 可以导出多个 被引入时与导出时 名一致\r\nexport {ShowTime};\r\nexport const num = 100;\r\nexport const num1 = 100;\r\nexport const num2 = 100;","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Todoing extends Component {\r\n    \r\n    render() {\r\n        var {todo} = this.props;\r\n        return (\r\n            <ul>\r\n                {\r\n                    todo.map((item,idx) => <li key={idx}>{item}---<button onClick={(e) => this.props.del(idx,e)}>删除</button></li>)//map循环\r\n                } \r\n            </ul>\r\n        )\r\n    }\r\n}\r\nTodoing.propTypes = {\r\n    todo : PropTypes.array,\r\n    del : PropTypes.func\r\n}//类型检查\r\nTodoing.defaultProps = {\r\n    todo : [1,2,3,4]\r\n}//设置默认值","import React, { Component } from 'react'\r\n\r\n//受控组件:value值被react控制的表单元素\r\n//可以实时获取表单元素的值(表单验证) 写法相对麻烦\r\n//\r\nexport default class Todoinput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.state = {\r\n            a : '',\r\n            b : '',\r\n            c : ''\r\n        }\r\n        \r\n    }\r\n    handleInput = (e) => {\r\n        //绑定this，事件处理函数写成箭头函数，或者用bind\r\n        if(e.keyCode === 13){//按下回车键\r\n            this.props.add(e.target.value);\r\n        }\r\n        \r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name] : parseInt(e.target.value === ''?0:e.target.value)\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        console.log(this);\r\n        this.a.focus();\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input ref={(inp)=>{this.a=inp}} name=\"a\" type=\"text\" onChange={this.handleChange} value={this.state.a} onKeyDown={this.handleInput}/>\r\n                +\r\n                <input name=\"b\" type=\"text\" onChange={this.handleChange} value={this.state.b} onKeyDown={this.handleInput}/>\r\n                +\r\n                <input name=\"c\" type=\"text\" onChange={this.handleChange} value={this.state.c} onKeyDown={this.handleInput}/>\r\n                =\r\n                <p>{this.state.a+this.state.b+this.state.c}</p>\r\n\r\n                {/**非受控组件：一次性获取或处理表单元素的值 */}\r\n                <input ref={(inp)=>{this.inp=inp}} type=\"text\"/>\r\n                <button onClick={()=>{console.log(this.inp.value)}}>提交</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n/**\r\n * 受控组件(添加value后就不可以修改了 通过onChange来动态修改)\r\n * 1、给input标签添加value属性 赋值为state的值\r\n * 2、给input标签绑定onChange事件 在事件处理函数中setState\r\n * 3.一个事件处理函数控制多个表单元素时 给input标签加上name属性 \r\n *   事件处理函数中写：setState({[e.target.name]:e.target.value})\r\n */","import React, { Component } from 'react'\r\nimport Todoing from './Todoing'\r\nimport Todoinput from './Todoinput'\r\n\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            todo : [1,2,3]\r\n        }\r\n        //深拷贝\\浅拷贝 每一个都是新的是深拷贝\r\n        var obj = {a : 100,b : [1,2,3]};\r\n        var obj1 = {c : 300};\r\n        // var o = {...obj};\r\n        var o = Object.assign({},obj,obj1);\r\n        // var o = JSON.parse(JSON.stringify(obj));\r\n        // o.a = 200;\r\n        // o.b[0] = 200;\r\n        console.log(o);//100 [1,2,3] 300\r\n        console.log(Object.keys(obj));// [\"a\",\"b\"]\r\n        Object.keys(obj).forEach((item)=>{\r\n            console.log(obj[item]);\r\n        });//遍历\r\n    }\r\n    addItem = (data) => {\r\n        // this.state.todo.push(data);\r\n        this.setState({//改变状态\r\n            todo : [...this.state.todo,data]   //...this.state.todo为原来的，data为新的\r\n        })\r\n    }\r\n    delItem = (idx,e) => {\r\n        //1、不能直接改变或处理stats 通过setState改变\r\n        console.log(e);\r\n        let todo = [...this.state.todo];\r\n        todo.splice(idx,1);\r\n        //2、setState是异步执行\r\n        this.setState((state,props)=>{\r\n            console.log(state.todo);\r\n            return{\r\n                todo:todo\r\n            }\r\n        })\r\n        //在setState里获取state可能会出错 不是你想要的值 可以像上面那样 把第一个参数写成函数 解决该问题\r\n        /*\r\n        this.setState({\r\n            todo : todo\r\n        },()=>{\r\n            console.log(this.state.todo);\r\n        })\r\n        */\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput add={this.addItem}/>\r\n                <Todoing del={this.delItem} todo={this.state.todo}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React ,{Fragment} from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./index.css\";\nimport {ShowTime} from \"./showTime\";\nimport Todolist from './Todolist/Todolist';\n\n//函数声明组件 组件名以大写字母开头\n// function ShowTime(props){\n//     console.log(props);\n//     return (<Fragment>\n//                 <div>{props.name}{props.age}</div>\n//                 <div>{new Date().toLocaleString()}</div>\n//             </Fragment>\n//             )\n// }\n\nReactDOM.render(\n    <Todolist/>,\n    document.getElementById('root')\n);\n\n// var num = [1,2,3,4,5];\n// ReactDOM.render(\n//     <ShowTime age={num} name=\"zhangsan\"/>,\n//     document.getElementById('root')\n// )\n\n//组件交互\n//父组件——>子组件：调用子组件时，添加属性，子组件通过props拿到传递的数据(函数是props 类是this.props)\n//子组件——>父组件：\n\n\n\n\n//显示当前系统时间\n/*\nfunction showTime(){\n    var ele = <div>{new Date().toLocaleString()}</div>;\n    ReactDOM.render(\n        ele,\n        document.querySelector('#root')\n    );\n}\nshowTime();\nsetInterval(showTime,1000);\n*/\n\n/*\n\n//自己封装render函数\nvar obj = {\n    type: 'div',\n    props: {\n        id: 'box',\n        class: 'box',\n        children: [\n            'hello',\n            'react',\n            {\n                type: 'h1',\n                props: {\n                    id: 'tit',\n                    class: 'tit',\n                    children: [\n                        'title',\n                        'react'\n                    ]\n                }\n            }\n        ]\n    }\n}\nfunction render(obj,container){\n    var {type,props} = obj;\n    //文档碎片\n    var fragment = document.createDocumentFragment();\n    var ele = document.createElement(type);\n    for(var item in props){\n        if(item === 'class'){\n            ele.className = props[item]\n        }else if(item === 'children'){\n            for(var i=0;i<props.children.length;i++){\n                // ele.innerHTML += props.children[i];\n                if(typeof props.children[i] === 'object'){\n                    render(props.children[i],ele);\n                }else{\n                    var txt = document.createTextNode(props.children[i]);\n                    ele.appendChild(txt);\n                }\n            }\n        }else{\n            ele[item] = props[item];\n        }\n    }\n    fragment.appendChild(ele);\n    container.appendChild(fragment);\n}\n// render(obj,document.getElementById('root'));\n\n//页面渲染过程：请求HTML页面、浏览器HTML解析器解析HTML文件、生成DOM树\n//link引入css文件、css解析器解析css，生成css对象模型、CSSOM和DOM tree生成一个render tree\n\n//页面回流(重排reflow):DOM结构变化、内容变化、大小、位置变化\n//页面重绘(repaint)：颜色的变化(背景色、字体颜色、边框颜色)\n\n//1.先用变量进行Dom处理 最后一次渲染\n\nconsole.time('time');\nvar div = document.getElementById('root');\nvar str = '';\nfor(var i = 0 ;i < 1000;i++){\n    str += '<p>' + i + '</p>';\n}\ndiv.innerHTML = str;\nconsole.timeEnd('time');\n*/\n\n//2.对于样式处理 声明一个css类\nvar div = document.getElementById('root');\n// div.style.width = '100px';\n// div.style.height = '100px';\n// div.style.background = 'red';\ndiv.className = 'active';\n\n//3.offsetLeft、offsetWidth、offserHeight等都会引起回流 要慎用\n/*\nconsole.log(div.offsetLeft);\nvar wid = div.offsetWidth;\nsetInterval(()=>{\n    wid += 1;\n    div.style.width = wid + 'px';\n},100);\n*/\n//4.文档碎片的概念(内容中的一个变量)\n\n\n//jsx语法\n// var ele = <h1 class=\"tit\">hello <p>react</p></h1>;\n// var ele = React.createElement(\n//     'h1',\n//     {id:'tit',class:'title'},\n//     'hello',\n//     React.createElement(\n//         'p',\n//         {id:'t',class:'tit'},\n//         'react')\n// );\n// ReactDOM.render(ele, document.getElementById('root'));\n\n\n"],"sourceRoot":""}